version: '3.8'

services:
  postgres-reactive:
    container_name: postgres-reactive
    image: postgres:16-alpine
    ports:
      - "7432:5432"
    environment:
      - "POSTGRES_DB=product"
      - "POSTGRES_USERNAME=postgres"
      - "POSTGRES_PASSWORD=strongpassword"
    volumes:
      - ./docker-compose-init/postgres:/docker-entrypoint-initdb.d
    restart: always
    networks:
      - reactive-network

  product:
    container_name: product
    build: product-service
    depends_on:
      - postgres-reactive
      - kafka-reactive
      - zipkin-reactive
      - jaeger-reactive
      - otel-collector-reactive
    ports:
      - "7771:7771"
      - "7071:7071"
      - "7001:7001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - R2DBC_URL=r2dbc:postgresql://postgres-reactive:5432/product
      - JDBC_URL=jdbc:postgresql://postgres-reactive:5432/product
      - DB_USERNAME=postgres
      - DB_PASSWORD=strongpassword
      - KAFKA_BOOTSTRAP_SERVERS=kafka-reactive:9092
      - OTEL_SERVICE_NAME=product-service
      - OTEL_RESOURCE_ATTRIBUTES=service=product-service,env=dev
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-reactive:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_METRIC_EXPORT_INTERVAL=15000
    networks:
      - reactive-network

  inventory:
    container_name: inventory
    build: inventory-service
    depends_on:
      - postgres-reactive
      - kafka-reactive
      - zipkin-reactive
    ports:
      - "7002:7002"
      - "7772:7772"
      - "7072:7072"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - R2DBC_URL=r2dbc:postgresql://postgres-reactive:5432/inventory
      - JDBC_URL=jdbc:postgresql://postgres-reactive:5432/inventory
      - DB_USERNAME=postgres
      - DB_PASSWORD=strongpassword
      - KAFKA_BOOTSTRAP_SERVERS=kafka-reactive:9092
      - ZIPKIN_BASE_URL=http://zipkin-reactive:9411
      - OTEL_SERVICE_NAME=inventory-service
      - OTEL_RESOURCE_ATTRIBUTES=service=inventory-service,env=dev
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-reactive:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_METRIC_EXPORT_INTERVAL=15000
    networks:
      - reactive-network

  order:
    container_name: order
    build: order-service
    depends_on:
      - postgres-reactive
      - kafka-reactive
      - zipkin-reactive
    ports:
      - "7003:7003"
      - "7773:7773"
      - "7073:7073"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - R2DBC_URL=r2dbc:postgresql://postgres-reactive:5432/orders
      - JDBC_URL=jdbc:postgresql://postgres-reactive:5432/orders
      - DB_USERNAME=postgres
      - DB_PASSWORD=strongpassword
      - KAFKA_BOOTSTRAP_SERVERS=kafka-reactive:9092
      - ZIPKIN_BASE_URL=http://zipkin-reactive:9411
      - OTEL_SERVICE_NAME=order-service
      - OTEL_RESOURCE_ATTRIBUTES=service=order-service,env=dev
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-reactive:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_METRIC_EXPORT_INTERVAL=15000
    networks:
      - reactive-network

  api-gateway:
    container_name: api-gateway
    build: armeria-api-gateway
    depends_on:
      - product
      - zipkin-reactive
    ports:
      - "5555:5555"
    environment:
      - PRODUCT_SERVICE_GRPC_HOST=product
      - PRODUCT_SERVICE_GRPC_PORT=7071
      - OTEL_SERVICE_NAME=armeria-api-gateway-service
      - OTEL_RESOURCE_ATTRIBUTES=service=armeria-api-gateway-service,env=dev
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-reactive:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_METRIC_EXPORT_INTERVAL=15000
    networks:
      - reactive-network

  zookeeper-reactive:
    container_name: zookeeper-reactive
    image: confluentinc/cp-zookeeper:7.7.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - reactive-network

  kafka-reactive:
    container_name: kafka-reactive
    image: confluentinc/cp-kafka:7.7.1
    depends_on:
      - zookeeper-reactive
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-reactive:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-reactive:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - reactive-network

  kafka-ui-reactive:
    container_name: kafka-ui-reactive
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on:
      - kafka-reactive
    ports:
      - "9099:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-reactive:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - reactive-network

  otel-collector-reactive:
    container_name: otel-collector-reactive
    image: otel/opentelemetry-collector-contrib:0.100.0
    volumes:
      - ./docker-compose-init/otel-collector/opentelemetry-collector.yml:/etc/otelcol-contrib/config.yaml
    restart: always
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "8889:8889" # Prometheus exporter metrics
      - "8888:8888"
      - "55679:55679"
    depends_on:
      - loki-reactive
      - jaeger-reactive
      - zipkin-reactive
      - tempo-reactive
    networks:
      - reactive-network

  tempo-reactive:
    container_name: tempo-reactive
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ./docker-compose-init/tempo/tempo.yml:/etc/tempo.yml
    restart: always
    ports:
      - "4317"  # otlp grpc
      - "3200"  # tempo as grafana datasource
    networks:
      - reactive-network

  loki-reactive:
    container_name: loki-reactive
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    restart: always
    ports:
      - "3100"
    networks:
      - reactive-network

  promeprometheus-reactive:
    container_name: prometheus-reactive
    image: prom/prometheus:v3.0.1
    volumes:
      - "./docker-compose-init/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "./docker-compose-init/prometheus/rules.yml:/etc/prometheus/rules.yml"
    command:
      - "--web.enable-remote-write-receiver"
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--enable-feature=exemplar-storage"
    depends_on:
      - otel-collector-reactive
    networks:
      - reactive-network
    ports:
      - 9090:9090

  grafana-reactive:
    image: grafana/grafana
    networks:
      - reactive-network
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./docker-compose-init/grafana/:/etc/grafana/provisioning/datasources

  node-exporter:
    image: prom/node-exporter:v1.8.2
    networks:
      - reactive-network
    ports:
      - 9100:9100

  alert-manager:
    image: prom/alertmanager:v0.27.0
    networks:
      - reactive-network
    ports:
      - 9093:9093

  zipkin-reactive:
    image: openzipkin/zipkin:3.4.2
    container_name: zipkin
    networks:
      - reactive-network
    ports:
      - "9411:9411"

  jaeger-reactive:
    image: jaegertracing/all-in-one:1.64.0
    container_name: jaeger-reactive
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    restart: always
    ports:
      - "16686:16686"
      - "4317"
      - "4318"
    networks:
      - reactive-network


volumes:
  esdata:
    driver: local

networks:
  reactive-network:
    driver: bridge