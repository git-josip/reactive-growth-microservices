grpc:
  server:
    port: 7071
server:
  port: 7001
management:
  tracing:
    sampling:
      probability: 1.0
    enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true
  server:
    port: 7771
spring:
  sleuth:
    messaging:
      kafka:
        enabled: true
    sampler:
      probability: 1.0
  application:
    name: product-service
  zipkin:
    baseUrl: ${ZIPKIN_BASE_URL:http://localhost:9411}
    enabled: true
    sender:
      type: web
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
#    consumer:
#      group-id: product-service
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  r2dbc:
    url: ${R2DBC_URL:r2dbc:postgresql://localhost:7432/products}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:strongpassword}
    pool:
      max-size: 40
  flyway:
    url: ${JDBC_URL:jdbc:postgresql://localhost:7432/products}
    user: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:strongpassword}
    locations: classpath:db/migration

logging:
  level:
    root: info
    com:
      example: DEBUG
    r2dbc: DEBUG
    sql: TRACE
    web: DEBUG
    io.grpc: DEBUG
    io.grpc.netty: DEBUG
    io.grpc.protobuf: DEBUG
    io.grpc.stub: DEBUG
    net.devh.boot.grpc: DEBUG
  group:
    r2dbc: 'org.springframework.r2dbc,org.springframework.data.r2dbc'
