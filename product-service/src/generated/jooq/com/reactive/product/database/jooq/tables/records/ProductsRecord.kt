/*
 * This file is generated by jOOQ.
 */
package com.reactive.product.database.jooq.tables.records


import com.reactive.product.database.jooq.tables.Products

import java.math.BigDecimal

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProductsRecord private constructor() : UpdatableRecordImpl<ProductsRecord>(Products.PRODUCTS) {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var name: String
        set(value): Unit = set(1, value)
        get(): String = get(1) as String

    open var category: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var price: BigDecimal
        set(value): Unit = set(3, value)
        get(): BigDecimal = get(3) as BigDecimal

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    /**
     * Create a detached, initialised ProductsRecord
     */
    constructor(id: Long? = null, name: String, category: String, price: BigDecimal): this() {
        this.id = id
        this.name = name
        this.category = category
        this.price = price
        resetChangedOnNotNull()
    }
}
