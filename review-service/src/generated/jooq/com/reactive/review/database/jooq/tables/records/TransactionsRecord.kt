/*
 * This file is generated by jOOQ.
 */
package com.reactive.review.database.jooq.tables.records


import com.reactive.review.database.jooq.tables.Transactions

import java.math.BigDecimal
import java.time.LocalDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class TransactionsRecord private constructor() : UpdatableRecordImpl<TransactionsRecord>(Transactions.TRANSACTIONS) {

    open var id: UUID
        set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    open var amount: BigDecimal
        set(value): Unit = set(1, value)
        get(): BigDecimal = get(1) as BigDecimal

    open var fromAcc: String
        set(value): Unit = set(2, value)
        get(): String = get(2) as String

    open var toAcc: String
        set(value): Unit = set(3, value)
        get(): String = get(3) as String

    open var createdAt: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised TransactionsRecord
     */
    constructor(id: UUID, amount: BigDecimal, fromAcc: String, toAcc: String, createdAt: LocalDateTime? = null): this() {
        this.id = id
        this.amount = amount
        this.fromAcc = fromAcc
        this.toAcc = toAcc
        this.createdAt = createdAt
        resetChangedOnNotNull()
    }
}
